# Optional docker environment with other tools

version: '3.8'
services:

        #  jdk-container:
        #    image: esteveslima/jdk-container-image:latest
        #    build:
        #      context: .
        #      dockerfile: Dockerfile.dev
        #    working_dir: /jdk-container
        #    volumes:
        #      - ../../:/jdk-container                                  # Hosting the project folder as volume
        #      - /var/run/docker.sock:/var/run/docker.sock              # Bind host docker socket to the container(enable docker commands to host machine)
        #    #   env_file:                                              # Disabled
        #    #       - .env
        #    restart: "no"
        #    ports:
        #      - '8080:8080'

    mysql-container:                                                  # Setting up local testing environment with mysql
      image: mysql
      volumes:
        - ./.volumes/.mysql-storage:/var/lib/mysql
      environment:
        - MYSQL_PASSWORD=password
        - MYSQL_ROOT_PASSWORD=password
        - MYSQL_DATABASE=mysql-db
      restart: always
      expose:
        - '3306'
      ports:
        - '3306:8080'
    workbench-container:                                              # Setting up mysql admin interface
      image: lscr.io/linuxserver/mysql-workbench
      environment:
        - PUID=1000
        - PGID=1000
        - TZ=Europe/London
      volumes:
        - ./.volumes/.mysql-workbench-storage/config:/config
      cap_add:
        - IPC_LOCK
      security_opt:
        - seccomp:unconfined
      restart: always
      ports:
        - '3307:3000'                                                 # interface available at http://localhost:3307

        #  postgres-container:                                              # Setting up local testing environment with postgres
        #    image: postgres
        #    volumes:
        #      - ./.volumes/.postgres-storage:/var/lib/postgresql/data
        #    environment:
        #      - POSTGRES_USER=postgres
        #      - POSTGRES_PASSWORD=password
        #      - POSTGRES_DB=postgres-db
        #    restart: always
        #    expose:
        #      - '5432'
        #    ports:
        #      - '5432:5432'
        #  pgadmin-container:                                                 # Setting up postgres admin interface(remember to connect to container, which is in docker internal network)
        #    image: dpage/pgadmin4                                          # Take some time to boot up
        #    volumes:
        #      - ./.volumes/.pgadmin-storage/pgadmin4/servers.json:/pgadmin4/servers.json     # Bind pgadmin configs to local folder(not working)
        #    environment:
        #      - PGADMIN_DEFAULT_EMAIL=postgres@postgres.com
        #      - PGADMIN_DEFAULT_PASSWORD=password
        #      - PGADMIN_LISTEN_ADDRESS=0.0.0.0
        #      - PGADMIN_LISTEN_PORT=5433
        #    restart: always
        #    expose:
        #      - '5433'
        #    ports:
        #      - '5433:5433'                                                 # interface available at http://localhost:5433

        # mongo-container:                                                  # Setting up MongoDB local testing environment with mongo
        #    image: mongo
        #    volumes:
        #        - ./.volumes/.mongodb-storage:/data/db
        #    environment:
        #        - MONGO_INITDB_DATABASE=mongo-db
        #        #- MONGO_INITDB_ROOT_USERNAME=user
        #        #- MONGO_INITDB_ROOT_PASSWORD=pass
        #    restart: always
        #    expose:
        #        - '27017'
        #     # ports:
        #     #     - '27017:27017'
        #  compass-container:                                              # Setting up mongodb compass UI at http://localhost:27018/
        #      image: mongo-express
        #      environment:
        #          - ME_CONFIG_MONGODB_SERVER=mongo-container
        #          - ME_CONFIG_MONGODB_PORT=27017
        #          - ME_CONFIG_MONGODB_ADMINUSERNAME=user
        #          - ME_CONFIG_MONGODB_ADMINPASSWORD=pass
        #          - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
        #      restart: "no"
        #      depends_on:
        #          - mongo-container
        #      ports:
        #          - '27018:8081'

        # dynamodb-container:                                              # Setting up DynamoDB local testing environment with dynamoDB local
        #     image: amazon/dynamodb-local
        #     restart: always
        #     command: "-jar DynamoDBLocal.jar -port 8000 -sharedDb -optimizeDbBeforeStartup -dbPath ./data"
        #     working_dir: /home/dynamodblocal
        #     user: root
        #     volumes:
        #         - "./.volumes/.dynamodb-storage:/home/dynamodblocal/data"
        #     expose:
        #         - '8000'
        #     ports:
        #         - '8000:8000'                                             # shell interface available at http://localhost:8000/shell/

        #  redis-container:                                                  # Setting up local testing environment with redis
        #      image: redis
        #      command: ["redis-server", "--appendonly", "yes"]
        #      volumes:
        #         - ./.volumes/.redis-storage:/data
        #      #environment:
        #      restart: always
        #      expose:
        #         - '6379'
        #      # ports:
        #      #    - '6379:6379'
        #  redis-commander-communication-service:                            # Setting up redis UI at http://localhost:6380/
        #      image: rediscommander/redis-commander:latest
        #      restart: "no"
        #      depends_on:
        #          - redis-container
        #      environment:
        #          - REDIS_HOSTS=`
        #              local:redis-container:6379:0:redispassword,
        #              local:redis-container:6379:1:redispassword
        #              `
        #      ports:
        #          - "6380:8081"

        # queue-container:                                                   # Setting up local testing environment with elasticMQ
        #     image: softwaremill/elasticmq-native
        #     restart: always
        #     expose:
        #         - '9324-9325'
        #     ports:
        #         - '9324:9324'
        #         - '9325:9325'                                              # interface available at http://localhost:9325